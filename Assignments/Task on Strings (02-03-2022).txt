//Name : Abhishek Palve
//Tasks on Strings 
//Date: 02-03-2022
-----------------------------------------------------------------------------------------

Task1:
//Write a C program to Concatenate two strings.
//Sample input :
//Enter String 1 : I love
//Enter String 2 : My India
//Sample Output :
//Final String After concatenation 2 strings :
//I love My India

#include<stdio.h>

main()
{
     char strcat[100], str[50]="0", str1[50];
     int i=0,len=0;
     printf("Enter String 1: ");
     gets(str);
     printf("Enter String 2: ");
     gets(str1);
     while((strcat[len]=str[len]) && ++len);
     while((strcat[len++]=str1[i]) && ++i);
     printf("Concatenated Strings: [ %s ] ",strcat);
}
/*
OUTPUT:
Enter String 1: I Love
Enter String 2:  My India
Concatenated Strings: [ I Love My India ] 
*/

-----------------------------------------------------------------------------------------

//Task2:
//Write a C program to compare two strings.

#include<stdio.h>

main()
{
     char str[50]="0", str1[50],i=0,len;
     printf("Enter String 1: ");
     gets(str);
     printf("Enter String 2: ");
     gets(str1);
     while(str[i] && ++i);
     len=i,i=0;
     while(str1[i] && ++i)
     {
          if(str[i]==str1[i])
               continue;
          else
               break;
     }
     if(i==len)
          printf("The given strings are EQUAL");
     else
          printf("The given strings are NOT EQUAL");
}
/*
OUTPUT1:
Enter String 1: Let's see if it's perfect
Enter String 2: Let's see if it's perfect
The given strings are EQUAL
OUTPUT2:
Enter String 1: It is 
Enter String 2: it is.
Given Strings are NOT EQUAL
*/

-----------------------------------------------------------------------------------------

//Task3:
//Task Write a C program to reverse the string.

#include<stdio.h>

main()
{
     char str[50]="0",temp;
     int i,j,len;
     printf("Enter String 1: ");
     gets(str);
     while(str[len] && ++len);
     for(i=0,j=len-1;i<len/2+1,j>=i;i++,j--)
          {
                    temp=str[i];
                    str[i]=str[j];
                    str[j]=temp;
          }
     printf("Reverse of the given string is: [ %s ]",str);
}
/*
OUTPUT:
Enter String 1: This is a test line
Reverse of the given string is: [ enil tset a si sihT ]
*/

-----------------------------------------------------------------------------------------

//Task4:
//Write a C program to check if the string is palindrome.

#include<stdio.h>

main()
{
     char str[50]="0";
     int i,j,len;
     printf("Enter String 1: ");
     gets(str);
     while(str[len] && ++len);
     for(i=0,j=len-1;i<len/2+1,j>=i;i++,j--)
          {
               if(str[i]==str[j])
                    continue;
               else
                    break;
               
          }
     if(i==len/2+1)
     printf("PALINDROME");
     else
     printf("NOT PALINDROME");
}
/*
OUTPUT1:
Enter String 1: refer             
Given string is PALINDROME
OUTPUT2:
Enter String 1: Hereby
Given string is NOT A PALINDROME
*/

-----------------------------------------------------------------------------------------

//Task5:
//Write a C program to check if the two strings are anagrams.
//(Anagrams : if the second string is made by using exactly the
//same characters (including their number of appearances
//then those TWO string are called to be anagrams of each other)
//Sample input :
//1st string : creative
//2nd string : reactive
//Sample output :
//Anagrams
//cat - act
//peach - cheap
//oppo - poop
//save - vase
//elbow - below
//abc - bca

#include<stdio.h>

main()
{
     char str[50]="0", str1[50],temp,temp1;
     int i=0,len,j=0,bound1=0,bound2=0,count=0;
     printf("Enter String 1: ");
     gets(str);
     printf("Enter String 2: ");
     gets(str1);
     while(str[bound1] && str1[bound2] && ++bound1 && ++bound2);
     if(bound1!=bound2)
          printf("Given Strings are NOT ANAGRAMS");
     else
     {
          //Arrange 1st string in order
          for(i=0;i<bound1;i++)
               for(j=i+1;j<bound1;j++)
               {
                    if(str[i]>str[j])
                    {
                         temp=str[i];
                         str[i]=str[j];
                         str[j]=temp; 
                    }
               }
          //Arrange 2nd string in order
          for(i=0;i<bound1;i++)
               for(j=i+1;j<bound1;j++)
               {
                    if(str1[i]>str1[j])
                    {
                         temp1=str1[i];
                         str1[i]=str1[j];
                         str1[j]=temp1; 
                    }
               }

          for(i=0;i<bound2;i++)
               if(str[i]==str1[i]);
               else
                    break;
               
          if(i==bound2)
               printf("Given Strings are ANAGRAMS");
          else
               printf("Given Strings are NOT ANAGRAMS");         
     }
     
}
/*
OUTPUT1:
Enter String 1: Great
Enter String 2: greag
Given Strings are NOT ANAGRAMS
OUTPUT2:
Enter String 1: great
Enter String 2: treag
Given Strings are ANAGRAMS
*/

-----------------------------------------------------------------------------------------

//Task6:
//Write a C program to check if the string is palindrome.
//(ignore cases and blank spaces)
//Ex. : Poor dan is in a  Droop

#include<stdio.h>

main()
{
     char str[50]="0";
     int i,j,len=0;
     printf("Enter String 1: ");
     gets(str);
     
     //Remove Spaces and make case insensitive
     for (int i = 0; str[i] != '\0'; i++)
     {
          if((str[i]>96) && (str[i]<123))
               str[i]^=32;
          if (str[i] != ' ')
               str[len++] = str[i];         
     }
     str[len] = '\0';

     //Calculate Length
     for(i=0,j=len-1;i<len/2+1,j>=i;i++,j--)
          {
               if(str[i]==str[j])
                    continue;
               else
                    break;
               
          }
     if(i==len/2+1)
          printf("Given string is PALINDROME");
     else
          printf("Given string is NOT A PALINDROME");
}
/*
OUTPUT1:
Enter String 1: Poor   Dan    is in a   DrooP
Given string is PALINDROME
OUTPUT2:
Enter String 1: Great    res  ponsibilitis
Given string is NOT A PALINDROME
*/

-----------------------------------------------------------------------------------------

//Task7:
//Write a C program to reverse each word of the statement.
//Eg .
//This is a test line
//output:
//sihT si a tset enil

#include<stdio.h>

main()
{
     char str[50]="0",temp;
     int i,j,len,k;
     printf("Enter String 1: ");
     gets(str);
     for(k=0;str[k]!='\0';k++)
     {
          len=k;
          while(str[len] !='\0' && str[len] != ' ' && ++len);
          printf("k=%d\n",k);
          printf("len=%d\n",len);
          for(i=k,j=len-1;i<len/2+1,j>=i;i++,j--)
          {
               temp=str[i];
               str[i]=str[j];
               str[j]=temp;
          }
          k=len;
     }
     printf("Reverse of the given string is: [ %s ]",str);
}
/*
OUTPUT1:
Enter String 1: This is a test line
Word reverseed string is: [ sihT si a tset enil ]
OUTPUT2:
Enter String 1: We gotta be good
Word reverseed string is: [ eW attog eb doog ]
*/

-----------------------------------------------------------------------------------------

//Task8:
//Write a C program to check well formess of parenthesis.
//Sample input 1 : {([]())}
//Sample output : Well Formed.
//Sample input 2 : {([)]}
//Sample output : Not well formed.
//Sample input 3 : {([])
//Sample Output : Not well formed.
//Sample input 4 : {}()[]
//Sample Output : Well formed .

#include<stdio.h>

main()
{
     char str[50]="0";
     int i,j,count=0,count1=0,count2=0,bound1=0,flag;
     printf("Enter String 1: ");
     gets(str);
     while(str[bound1] && ++bound1);
     if(bound1&1)
          printf("Given sequence of paranthesis is NOT WELL FORMED");
     else
     {
          for(i=0;i<bound1;i++)
          {
               switch(str[i])
               {
                    case '{':
                         count++;
                         if(str[i+1] == ']' || str[i+1] == ')')
                         {
                              printf("Given sequence of paranthesis is NOT WELL FORMED");
                              flag=1;
                         }
                         break;
                    case '[':
                         count1++;
                         if(str[i+1] == '}' || str[i+1] == ')')
                         {
                              printf("Given sequence of paranthesis is NOT WELL FORMED");
                              flag=1;
                         }
                         break;
                    case '(':
                         count2++;
                         if(str[i+1] == ']' || str[i+1] == '}')
                         {
                              printf("Given sequence of paranthesis is NOT WELL FORMED");
                              flag=1;
                         }
                         break;
                    case '}':
                         count--;
                         break; 
                    case ']':
                         count1--;
                         break; 
                    case ')':
                         count2--;
                         break;
               } 
          }
     
          if(!(count) && !(count1) && !(count2) && flag!=1)
               printf("Given sequence of paranthesis is WELL FORMED");
     }
}
/*
OUTPUT1: 
Enter String 1: {([]())}
Given sequence of paranthesis is WELL FORMED
OUTPUT2:
Enter String 1: {([)]}
Given sequence of paranthesis is NOT WELL FORMED
OUTPUT3:
Enter String 1: {([]) 
Given sequence of paranthesis is NOT WELL FORMED
OUTPUT4:
Enter String 1: {}()[]
Given sequence of paranthesis is WELL FORMED
*/